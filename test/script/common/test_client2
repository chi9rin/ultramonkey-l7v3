#!/usr/bin/perl

use strict;
use warnings;
use IO::Socket::INET;
use IO::Select;
use Getopt::Long;

my $addr = "127.0.0.1";
my $port = 80;
my $wait = 0;
my $help = 0;
my $time = 0;
my $timeout = 5;

my $result = GetOptions(
	"addr=s" => \$addr,
	"port=i" => \$port,
	"wait=i" => \$wait,
	"time=i" => \$time,
	"stop=i" => \$timeout,
	"help"   => \$help,
);
my @files = @ARGV;
usage() if (!$result || $help);

client($addr, $port, $wait, $timeout, @files);

# connect server
sub client {
	my ($addr, $port, $wait, $timeout, @files) = @_;

	my $server = IO::Socket::INET->new(
		PeerAddr => "$addr:$port",
		Timeout  => 5,
	) || die $!;

	my $select = IO::Select->new;
	$select->add($server);

	for my $file (@files) {
		# request data
		my $data = read_file($file);

		sleep $wait if $wait;

		# send request
		if (!$time) {
			print $server $data;
		} else {
			send_slow_request($server, $data, $time);
		}
	}

	# receive response
	while ($select->can_read($timeout)) {
		my $buffer;
		sysread $server, $buffer, 1000;
		last if !$buffer;
		print $buffer;
	}
	$server->close;
}

# send request just in $time sec.
sub send_slow_request {
	my ($sock, $data, $time) = @_;
	my $length = length $data;
	if ($length < $time) {
		sleep $time - $length;
		$time = $length;
	}
	my $chunk_length = int ($length / $time);
	my @data = split //, $data;
	my $sent = 0;
	for (@data) {
		print $sock $_;
		$sent++;
		if ($sent >= $chunk_length) {
			$sent = 0;
			sleep 1;
		}
	}
}

sub read_file {
	my $file = shift;
	my $data = '';
	open my $fh, "<", $file or die $!;
	$data .= $_ while <$fh>;
	close $fh;
	$data;
}

sub usage {
	die <<"END";
Usage: $0 [OPTION] FILE [FILE...]

  -a ADDR      connect address (default 127.0.0.1)
  -p PORT      connect port (default 80)
  -w N         wait N seconds before send request
  -t N         send request spending just N seconds
  -s N         timeout N seconds (default 5)
END
}
