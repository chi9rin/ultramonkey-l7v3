#!/usr/bin/perl

use strict;
use warnings;
use IO::Socket::INET;
use Getopt::Long;

my $port = 80;
my $wait = 0;
my $help = 0;
my $time = 0;

my $result = GetOptions(
	"port=i" => \$port,
	"wait=i" => \$wait,
	"time=i" => \$time,
	"help"   => \$help,
);
my @files = @ARGV;
usage() if (!$result || $help);

server($port, $wait, @files);

# listen server
sub server {
	my ($port, $wait, @files) = @_;

	my $sock = IO::Socket::INET->new(
		LocalAddr => "0:$port",
		Listen    => 5,
		ReuseAddr => 1,
	) || die $!;

	my $client = $sock->accept;

	for my $file (@files) {
		# response data
		my $data = read_file($file);

		sleep $wait if $wait;

		# send response
		if (!$time) {
			print $client $data;
		} else {
			send_slow_response($client, $data, $time);
		}
	}
}

# send response just in $time sec.
sub send_slow_response {
	my ($sock, $data, $time) = @_;
	my $length = length $data;
	if ($length < $time) {
		sleep $time - $length;
		$time = $length;
	}
	my $chunk_length = int ($length / $time);
	my @data = split //, $data;
	my $sent = 0;
	for (@data) {
		print $sock $_;
		$sent++;
		if ($sent >= $chunk_length) {
			$sent = 0;
			sleep 1;
		}
	}
}

sub read_file {
	my $file = shift;
	my $data = '';
	open my $fh, "<", $file or die $!;
	$data .= $_ while <$fh>;
	close $fh;
	$data;
}

sub usage {
	die <<"END";
Usage: $0 [OPTION] FILE [FILE...]

  -p PORT      listen port (default 80)
  -w N         wait N seconds before send response
  -t N         send response spending just N seconds
END
}
