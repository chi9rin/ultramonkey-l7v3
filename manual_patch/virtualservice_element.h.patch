--- ultramonkey-l7-r10234/l7vsd/include/virtualservice_element.h	2010-06-17 19:41:22.000000000 +0900
+++ ultramonkey-l7-3.0.0-0/l7vsd/include/virtualservice_element.h	2010-09-17 17:09:15.316146631 +0900
@@ -85,45 +85,56 @@
         int                     socket_option_tcp_quickack;
         std::string             socket_option_string;
 
+        unsigned long long    http_total_count;
+        unsigned long long    http_get_count;
+        unsigned long long    http_post_count;
+
+
         virtualservice_element() :  udpmode(false),
-                sorry_maxconnection(0LL),
-                sorry_flag(0),
-                qos_upstream(0ULL),
-                qos_downstream(0ULL),
-                throughput_upstream(0ULL),
-                throughput_downstream(0ULL),
-                access_log_flag(0),
-                socket_option_ip_transparent(0),
-                socket_option_tcp_defer_accept(0),
-                socket_option_tcp_nodelay(0),
-                socket_option_tcp_cork(0),
-                socket_option_tcp_quickack(0) {}
+                        sorry_maxconnection(0LL),
+                        sorry_flag(0),
+                        qos_upstream(0ULL),
+                        qos_downstream(0ULL),
+                        throughput_upstream(0ULL),
+                        throughput_downstream(0ULL),
+                        access_log_flag(0),
+                        socket_option_ip_transparent(0),
+                        socket_option_tcp_defer_accept(0),
+                        socket_option_tcp_nodelay(0),
+                        socket_option_tcp_cork(0),
+                        socket_option_tcp_quickack(0),
+                        http_total_count(0ULL),
+                        http_get_count(0ULL),
+                        http_post_count(0ULL) {}
 
         virtualservice_element(const virtualservice_element &in)
-                :   udpmode(in.udpmode),
-                    tcp_accept_endpoint(in.tcp_accept_endpoint),
-                    udp_recv_endpoint(in.udp_recv_endpoint),
-                    protocol_module_name(in.protocol_module_name),
-                    schedule_module_name(in.schedule_module_name),
-                    sorry_maxconnection(in.sorry_maxconnection),
-                    sorry_endpoint(in.sorry_endpoint),
-                    sorry_flag(in.sorry_flag),
-                    qos_upstream(in.qos_upstream),
-                    qos_downstream(in.qos_downstream),
-                    throughput_upstream(in.throughput_upstream),
-                    throughput_downstream(in.throughput_downstream),
-                    access_log_flag(in.access_log_flag),
-                    ssl_file_name(in.ssl_file_name),
-                    access_log_file_name(in.access_log_file_name),
-                    protocol_module_for_indication_options(in.protocol_module_for_indication_options),
-                    access_log_rotate_key_info(in.access_log_rotate_key_info),
-                    access_log_rotate_verbose_info(in.access_log_rotate_verbose_info),
-                    socket_option_ip_transparent(in.socket_option_ip_transparent),
-                    socket_option_tcp_defer_accept(in.socket_option_tcp_defer_accept),
-                    socket_option_tcp_nodelay(in.socket_option_tcp_nodelay),
-                    socket_option_tcp_cork(in.socket_option_tcp_cork),
-                    socket_option_tcp_quickack(in.socket_option_tcp_quickack),
-                    socket_option_string(in.socket_option_string) {
+                        :   udpmode(in.udpmode),
+                        tcp_accept_endpoint(in.tcp_accept_endpoint),
+                        udp_recv_endpoint(in.udp_recv_endpoint),
+                        protocol_module_name(in.protocol_module_name),
+                        schedule_module_name(in.schedule_module_name),
+                        sorry_maxconnection(in.sorry_maxconnection),
+                        sorry_endpoint(in.sorry_endpoint),
+                        sorry_flag(in.sorry_flag),
+                        qos_upstream(in.qos_upstream),
+                        qos_downstream(in.qos_downstream),
+                        throughput_upstream(in.throughput_upstream),
+                        throughput_downstream(in.throughput_downstream),
+                        access_log_flag(in.access_log_flag),
+                        ssl_file_name(in.ssl_file_name),
+                        access_log_file_name(in.access_log_file_name),
+                        protocol_module_for_indication_options(in.protocol_module_for_indication_options),
+                        access_log_rotate_key_info(in.access_log_rotate_key_info),
+                        access_log_rotate_verbose_info(in.access_log_rotate_verbose_info),
+                        socket_option_ip_transparent(in.socket_option_ip_transparent),
+                        socket_option_tcp_defer_accept(in.socket_option_tcp_defer_accept),
+                        socket_option_tcp_nodelay(in.socket_option_tcp_nodelay),
+                        socket_option_tcp_cork(in.socket_option_tcp_cork),
+                        socket_option_tcp_quickack(in.socket_option_tcp_quickack),
+                        socket_option_string(in.socket_option_string),
+                        http_total_count(in.http_total_count),
+                        http_get_count(in.http_get_count),
+                        http_post_count(in.http_post_count) {
                 protocol_args.clear();
                 BOOST_FOREACH(std::string str, in.protocol_args) {
                         protocol_args.push_back(str);
@@ -163,6 +174,9 @@
                 socket_option_tcp_cork = in.socket_option_tcp_cork;
                 socket_option_tcp_quickack = in.socket_option_tcp_quickack;
                 socket_option_string = in.socket_option_string;
+                http_total_count = in.http_total_count;
+                http_get_count = in.http_get_count;
+                http_post_count = in.http_post_count;
                 protocol_args.clear();
                 BOOST_FOREACH(std::string str, in.protocol_args) {
                         protocol_args.push_back(str);
@@ -180,27 +194,30 @@
 
         friend    bool operator==(const virtualservice_element &elem1, const virtualservice_element &elem2) {
                 if (elem1.udpmode == elem2.udpmode &&
-                    elem1.tcp_accept_endpoint == elem2.tcp_accept_endpoint &&
-                    elem1.udp_recv_endpoint == elem2.udp_recv_endpoint &&
-                    elem1.protocol_module_name == elem2.protocol_module_name &&
-                    elem1.sorry_maxconnection == elem2.sorry_maxconnection &&
-                    elem1.sorry_flag == elem2.sorry_flag &&
-                    elem1.qos_upstream == elem2.qos_upstream &&
-                    elem1.qos_downstream == elem2.qos_downstream &&
-                    elem1.throughput_upstream == elem2.throughput_upstream &&
-                    elem1.throughput_downstream == elem2.throughput_downstream &&
-                    elem1.access_log_flag == elem2.access_log_flag &&
-                    elem1.ssl_file_name == elem2.ssl_file_name &&
-                    elem1.access_log_file_name == elem2.access_log_file_name &&
-                    elem1.protocol_module_for_indication_options == elem2.protocol_module_for_indication_options &&
-                    elem1.access_log_rotate_key_info == elem2.access_log_rotate_key_info &&
-                    elem1.access_log_rotate_verbose_info == elem2.access_log_rotate_verbose_info &&
-                    elem1.socket_option_ip_transparent == elem2.socket_option_ip_transparent &&
-                    elem1.socket_option_tcp_defer_accept == elem2.socket_option_tcp_defer_accept &&
-                    elem1.socket_option_tcp_nodelay == elem2.socket_option_tcp_nodelay &&
-                    elem1.socket_option_tcp_cork == elem2.socket_option_tcp_cork &&
-                    elem1.socket_option_tcp_quickack == elem2.socket_option_tcp_quickack &&
-                    elem1.socket_option_string == elem2.socket_option_string) {
+                                elem1.tcp_accept_endpoint == elem2.tcp_accept_endpoint &&
+                                elem1.udp_recv_endpoint == elem2.udp_recv_endpoint &&
+                                elem1.protocol_module_name == elem2.protocol_module_name &&
+                                elem1.sorry_maxconnection == elem2.sorry_maxconnection &&
+                                elem1.sorry_flag == elem2.sorry_flag &&
+                                elem1.qos_upstream == elem2.qos_upstream &&
+                                elem1.qos_downstream == elem2.qos_downstream &&
+                                elem1.throughput_upstream == elem2.throughput_upstream &&
+                                elem1.throughput_downstream == elem2.throughput_downstream &&
+                                elem1.access_log_flag == elem2.access_log_flag &&
+                                elem1.ssl_file_name == elem2.ssl_file_name &&
+                                elem1.access_log_file_name == elem2.access_log_file_name &&
+                                elem1.protocol_module_for_indication_options == elem2.protocol_module_for_indication_options &&
+                                elem1.access_log_rotate_key_info == elem2.access_log_rotate_key_info &&
+                                elem1.access_log_rotate_verbose_info == elem2.access_log_rotate_verbose_info &&
+                                elem1.socket_option_ip_transparent == elem2.socket_option_ip_transparent &&
+                                elem1.socket_option_tcp_defer_accept == elem2.socket_option_tcp_defer_accept &&
+                                elem1.socket_option_tcp_nodelay == elem2.socket_option_tcp_nodelay &&
+                                elem1.socket_option_tcp_cork == elem2.socket_option_tcp_cork &&
+                                elem1.socket_option_tcp_quickack == elem2.socket_option_tcp_quickack &&
+                                elem1.socket_option_string == elem2.socket_option_string &&
+                                elem1.http_total_count == elem2.http_total_count &&
+                                elem1.http_get_count == elem2.http_get_count &&
+                                elem1.http_post_count == elem2.http_post_count) {
 
                         if (elem1.realserver_vector.size() != elem2.realserver_vector.size()) return false;
                         for (unsigned int i = 0; i < elem1.realserver_vector.size(); ++i) {
@@ -223,27 +240,30 @@
 
         friend bool operator!=(const virtualservice_element &elem1, const virtualservice_element &elem2) {
                 if (elem1.udpmode == elem2.udpmode &&
-                    elem1.tcp_accept_endpoint == elem2.tcp_accept_endpoint &&
-                    elem1.udp_recv_endpoint == elem2.udp_recv_endpoint &&
-                    elem1.protocol_module_name == elem2.protocol_module_name &&
-                    elem1.sorry_maxconnection == elem2.sorry_maxconnection &&
-                    elem1.sorry_flag == elem2.sorry_flag &&
-                    elem1.qos_upstream == elem2.qos_upstream &&
-                    elem1.qos_downstream == elem2.qos_downstream &&
-                    elem1.throughput_upstream == elem2.throughput_upstream &&
-                    elem1.throughput_downstream == elem2.throughput_downstream &&
-                    elem1.access_log_flag == elem2.access_log_flag &&
-                    elem1.ssl_file_name == elem2.ssl_file_name &&
-                    elem1.access_log_file_name == elem2.access_log_file_name &&
-                    elem1.protocol_module_for_indication_options == elem2.protocol_module_for_indication_options &&
-                    elem1.access_log_rotate_key_info == elem2.access_log_rotate_key_info &&
-                    elem1.access_log_rotate_verbose_info == elem2.access_log_rotate_verbose_info &&
-                    elem1.socket_option_ip_transparent == elem2.socket_option_ip_transparent &&
-                    elem1.socket_option_tcp_defer_accept == elem2.socket_option_tcp_defer_accept &&
-                    elem1.socket_option_tcp_nodelay == elem2.socket_option_tcp_nodelay &&
-                    elem1.socket_option_tcp_cork == elem2.socket_option_tcp_cork &&
-                    elem1.socket_option_tcp_quickack == elem2.socket_option_tcp_quickack &&
-                    elem1.socket_option_string == elem2.socket_option_string) {
+                                elem1.tcp_accept_endpoint == elem2.tcp_accept_endpoint &&
+                                elem1.udp_recv_endpoint == elem2.udp_recv_endpoint &&
+                                elem1.protocol_module_name == elem2.protocol_module_name &&
+                                elem1.sorry_maxconnection == elem2.sorry_maxconnection &&
+                                elem1.sorry_flag == elem2.sorry_flag &&
+                                elem1.qos_upstream == elem2.qos_upstream &&
+                                elem1.qos_downstream == elem2.qos_downstream &&
+                                elem1.throughput_upstream == elem2.throughput_upstream &&
+                                elem1.throughput_downstream == elem2.throughput_downstream &&
+                                elem1.access_log_flag == elem2.access_log_flag &&
+                                elem1.ssl_file_name == elem2.ssl_file_name &&
+                                elem1.access_log_file_name == elem2.access_log_file_name &&
+                                elem1.protocol_module_for_indication_options == elem2.protocol_module_for_indication_options &&
+                                elem1.access_log_rotate_key_info == elem2.access_log_rotate_key_info &&
+                                elem1.access_log_rotate_verbose_info == elem2.access_log_rotate_verbose_info &&
+                                elem1.socket_option_ip_transparent == elem2.socket_option_ip_transparent &&
+                                elem1.socket_option_tcp_defer_accept == elem2.socket_option_tcp_defer_accept &&
+                                elem1.socket_option_tcp_nodelay == elem2.socket_option_tcp_nodelay &&
+                                elem1.socket_option_tcp_cork == elem2.socket_option_tcp_cork &&
+                                elem1.socket_option_tcp_quickack == elem2.socket_option_tcp_quickack &&
+                                elem1.socket_option_string == elem2.socket_option_string &&
+                                elem1.http_total_count == elem2.http_total_count &&
+                                elem1.http_get_count == elem2.http_get_count &&
+                                elem1.http_post_count == elem2.http_post_count ) {
 
                         if (elem1.realserver_vector.size() != elem2.realserver_vector.size()) return true;
                         for (unsigned int i = 0; i < elem1.realserver_vector.size(); ++i) {
@@ -282,9 +302,9 @@
                 os << boost::format("udpmode=%s: "
                                     "tcp_accept_endpoint=%s: "
                                     "udp_recv_endpoint=%s: ")
-                   % elem.udpmode
-                   % elem.tcp_accept_endpoint
-                   % elem.udp_recv_endpoint;
+                % elem.udpmode
+                % elem.tcp_accept_endpoint
+                % elem.udp_recv_endpoint;
 
                 {
                         unsigned int i = 0;
@@ -298,8 +318,8 @@
 
                 os << boost::format("protocol_module_name=%s: "
                                     "schedule_module_name=%s: ")
-                   % elem.protocol_module_name
-                   % elem.schedule_module_name;
+                % elem.protocol_module_name
+                % elem.schedule_module_name;
 
                 std::stringstream access_log_rotate_arguments_stream;
                 {
@@ -333,28 +353,34 @@
                                     "socket_option_tcp_nodelay=%d: "
                                     "socket_option_tcp_cork=%d: "
                                     "socket_option_tcp_quickack=%d: "
-                                    "socket_option_string=%s}")
-                   % args
-                   % elem.sorry_maxconnection
-                   % elem.sorry_endpoint
-                   % elem.sorry_flag
-                   % elem.qos_upstream
-                   % elem.qos_downstream
-                   % elem.throughput_upstream
-                   % elem.throughput_downstream
-                   % elem.access_log_flag
-                   % elem.ssl_file_name
-                   % elem.access_log_file_name
-                   % access_log_rotate_arguments_stream.str()
-                   % elem.protocol_module_for_indication_options
-                   % elem.access_log_rotate_key_info
-                   % elem.access_log_rotate_verbose_info
-                   % elem.socket_option_ip_transparent
-                   % elem.socket_option_tcp_defer_accept
-                   % elem.socket_option_tcp_nodelay
-                   % elem.socket_option_tcp_cork
-                   % elem.socket_option_tcp_quickack
-                   % elem.socket_option_string;
+                                    "socket_option_string=%s; "
+                                    "http_total_count=%d; "
+                                    "http_get_count=%d; "
+                                    "http_post_count=%d; }")
+                % args
+                % elem.sorry_maxconnection
+                % elem.sorry_endpoint
+                % elem.sorry_flag
+                % elem.qos_upstream
+                % elem.qos_downstream
+                % elem.throughput_upstream
+                % elem.throughput_downstream
+                % elem.access_log_flag
+                % elem.ssl_file_name
+                % elem.access_log_file_name
+                % access_log_rotate_arguments_stream.str()
+                % elem.protocol_module_for_indication_options
+                % elem.access_log_rotate_key_info
+                % elem.access_log_rotate_verbose_info
+                % elem.socket_option_ip_transparent
+                % elem.socket_option_tcp_defer_accept
+                % elem.socket_option_tcp_nodelay
+                % elem.socket_option_tcp_cork
+                % elem.socket_option_tcp_quickack
+                % elem.socket_option_string
+                % elem.http_total_count
+                % elem.http_get_count
+                % elem.http_post_count;
 
                 return os;
         }
@@ -393,6 +419,9 @@
                 ar &socket_option_tcp_cork;
                 ar &socket_option_tcp_quickack;
                 ar &socket_option_string;
+                ar &http_total_count;
+                ar &http_get_count;
+                ar &http_post_count;
         }
 };
 
